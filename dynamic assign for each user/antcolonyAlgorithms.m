%ant colony algorithms and tabu list
%通过这个算法，将到达率矩阵元素重新分配到所有元素都小于0.012，或者只有一个大于0.012；
% location={[1,1],[1,2],[1,3],[1,4],[1,5];
%                 [2,1],[2,2],[2,3],[2,4],[2,5];
%                 [3,1],[3,2],[3,3],[3,4],[3,5];
%                 [4,1],[4,2],[4,3],[4,4],[4,5];
%                 [5,1],[5,2],[5,3],[5,4],[5,5]};
%多次进行，查看堵在各个区域的概率；
B=1;
bblock=zeros(1,length(B));
for b=1:1
A=1;
% B=100;%%B太大的话（1000就出问题了）容易导致无穷大的出现 毕竟3^1000也是很大的
block=zeros(1,25);
sum_iter_num=0;

%a=2;
 for k=1:1000
%拥堵表block

%邻接信息linkInfo记录邻接位置的编号9,13,14,16为空编号，不参与
linkInfo={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25;
        [2,6],[1,3,7],[2,4,8],[3,5],[4,10],  [1,7,11],[2,6,8,12],[3,7],[0],[5,15], [6,12],[7,11,17],[0],[0],[10,20], [0],[12,18,22],[17,19,23],[18,20,24],[15,19,25], [22],[17,21,23],[18,22,24],[19,23,25],[20,24]};
 delt=100000;  
 
 makespan=[587,1041.5,1035.7,1126.7,1058.3, 26895,1118.5,33798,1116.9,34483,  1163.9,1772,6186.7,34817,28849, 34970,32705,35008,34219,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054,35054];
%makespan=1:1:500000;
 userArrate=ceil(rand(1,25)*10)*2/1000;
 %设置山水区域
 userArrate(9)=0;
 userArrate(13)=0;
 userArrate(14)=0;
 userArrate(16)=0;
%userArrate=[0.014,0.020,0.006,0.004,0.008,0.008,0.018,0.008,0.000,0.020,0.012,0.012,0.000,0.000,0.010,0.000,0.014,0.006,0.006,0.004,0.008,0.012,0.018,0.010,0.020];
 b1=sum(userArrate);  
 %num表示每个区域在delt内的人数
 %sum_num表示总的人数
num=zeros(1,length(userArrate));
sum_num=0;
%time表示用户数*平均makespan
%sum_time表示总的makespan，最后是sum_time/sum_num;
time=zeros(1,length(userArrate));
sum_time=0;
mean_time=0;
        
%将上面的位置信息编码，从1到25变好区域；
codelocation=1:1:25;
%  %编码方式为[1,2]---(1-1)*5+2----2 障碍区域的编码为0
%  %逆编码为   2%5=2  （2-2）/5+1=1
%  for i=1:size(location,1)
%          for j=1:size(location,2)
%                     codelocation(i,j)=size(location,1)*(location{i,j}(1,1)-1)+location{i,j}(1,2);              
%          end
%  end
%  
 %随机设定的不同的区域到达率
    
 
 %信息采集模块，重复的模块
        num=delt*userArrate;
        sum_num=sum_num+sum(num);
        for i=1:length(time)
                if(userArrate(i)~=0)
                  time(i)=num(i)*makespan(floor(1000*userArrate(i)));
                else
                        time(i)=0;
                end
        end
        sum_time=sum_time+sum(time);
                  
 %antList 第一行是蚂蚁的编码，第二行是蚂蚁量，例子：0.018-0.012=0.006 非蚂蚁第二行为零
 %tabuList 到达率等于0.012的区域的codelocation
 %antEle 第一行是蚂蚁素的编码，第二行是蚂蚁素的量 例子：0.012-0.008=0.004，非蚂蚁素第二行为零
 antList=zeros(2,25);
 antEle=zeros(2,25);
 tabuList=zeros(1,25);
 leap=0.012;
 for i=1:length(codelocation)    
                 %不管蚂蚁还是蚂蚁素，先把第一行初始化了
                  antList(1,codelocation(i))=codelocation(i);
                  antEle(1,codelocation(i))=codelocation(i);
                 if(userArrate(i)>leap)                       
                         antList(2,codelocation(i))=userArrate(i)-leap;
                 elseif(userArrate(i)>0&&userArrate(i)<leap)                        
                         antEle(2,codelocation(i))=leap-userArrate(i);
                 else
                         tabuList(codelocation(i))=1;
                 end      
 end
 %表示迭代次数
 iter_num=0;
 %一个时间间隙的处理开始
 while(any(antList(2,:))==1&&any(antEle(2,:))==1)%如果蚂蚁全为零或者蚂蚁素全为零，则转移结束
        %先求邻接蚂蚁素之和
        sumAntEle=zeros(1,25);%sumAntEle只是蚂蚁周围的蚂蚁素，不是蚂蚁周围，为零
        for i=1:size(linkInfo,2)
                if(antList(2,i)~=0)%如果是蚂蚁
                        for j=1:length(linkInfo{2,i})%linkInfo{1,i}蚂蚁和linkInfo{2,i}(1,j)蚂蚁素
                            if(linkInfo{2,i}(1,j)~=0&&antEle(2,linkInfo{2,i}(1,j))~=0)%如果蚂蚁素不为零，也就是说既不是禁忌表中的元素，又不是蚂蚁
                                    sumAntEle(1,linkInfo{1,i})=  sumAntEle(1,linkInfo{1,i})+(antEle(2,linkInfo{2,i}(1,j))^A)*length(linkInfo{2,linkInfo{2,i}(1,j)})^B(b);%length(linkInfo{2,linkInfo{2,i}(1,j)})表示邻接区域的邻接区域数目
                            end
                        end
                end
        end
        %如果周围没有蚂蚁素，即不能转移，则变成阻塞区域，次区域的block值加一。
        for i=1:size(linkInfo,2)
                 if(antList(2,i)~=0&&sumAntEle(1,i)==0)%antList(2,i)和linkInfo{2,i}
                         ran=ceil(rand()*length(linkInfo{2,i}));
                         tempLink=linkInfo{2,i}(ran);%tempLink表示被转移的新的蚂蚁
                         antList(2,tempLink)=antList(2,i);%随机选一个邻接区域转移
                         antList(2,i)=0;
                         tabuList(i)=1;
                         tabuList(tempLink)=0;
                 
                         %对转移后的新的蚂蚁，求蚂蚁素
                         for j=1:length(linkInfo{2,tempLink})
                                 sumAntEle(tempLink)=sumAntEle(tempLink)+(antEle(2,linkInfo{2,tempLink}(j))^A)*(length(linkInfo{2,linkInfo{2,tempLink}(1,j)}))^B(b);
                         end
                 end
        end
        

        %根据概率开始转移
        probable=zeros(25,25);%表示蚂蚁向不同的区域转移的概率
         for i=1:size(linkInfo,2)
                if(antList(2,i)~=0&&sumAntEle(1,i)~=0)%如果是蚂蚁且蚂蚁素不空
                        for j=1:length(linkInfo{2,i})%linkInfo{1,i}蚂蚁和linkInfo{2,i}(1,j)蚂蚁素
                            if( linkInfo{2,i}(1,j)~=0&&antEle(2,linkInfo{2,i}(1,j))~=0)%%如果蚂蚁素不为零，也就是说既不是禁忌表中的元素，又不是蚂蚁
                                    probable(i,linkInfo{2,i}(1,j))=(antEle(2,linkInfo{2,i}(1,j))^A)*length(linkInfo{2,linkInfo{2,i}(j)})^B(b)/sumAntEle(1,linkInfo{1,i});%蚂蚁数量到达率*（一个区域的蚂蚁素/sumAntEle)
                                    %计算蚂蚁素的转移
                                    antEle(2,linkInfo{2,i}(1,j))=antEle(2,linkInfo{2,i}(1,j))-antList(2,linkInfo{1,i})*probable(linkInfo{1,i},linkInfo{2,i}(1,j));
                                    
                            end
                        end
                        %蚂蚁量置零
                        antList(2,linkInfo{1,i})=0;
                         %这个蚂蚁在禁忌表中置1
                        tabuList(1,i)=1;
  
                end
         end
         
         %重新设置蚂蚁素，负的变蚂蚁，蚂蚁量和蚂蚁素都为零的禁忌表设置为1
         for i=1:size(antEle,2)
                 if(antEle(2,i)==0&&antList(2,i)==0)
                         tabuList(1,i)=1;
                 elseif(antEle(2,i)<0)
                         antList(2,i)=-real(antEle(2,i));
                         antEle(2,i)=0;
                 end               
         end 
         %经过一次调整后，重新设定userArrate
         for i=1:size(antEle,2)
                 %如果不是高山流水区域
                 if(userArrate(i)~=0)
                        userArrate(i)=real( leap+real(antList(2,i))-real(antEle(2,i)));
                 end
         end
         %扫描userArrate 如果大于0.012，则为阻塞区域：
         for i=1:length(userArrate)
                 if(userArrate(i)>leap)
                         block(i)=block(i)+1;
                 end
         end
         iter_num=iter_num+1;


         %信息采集模块
        num=delt*userArrate;
        sum_num=sum_num+sum(num);
         for i=1:length(time)
                if(userArrate(i)>=0.001)
                        time(i)=num(i)*makespan(floor(1000*userArrate(i)));
                else
                        time(i)=0;
                end
         end
        sum_time=sum_time+sum(time);
       
    
 end
 sum_iter_num= sum_iter_num+iter_num;
 %重新设置userArrate，由于概率开高次根号，开出虚部，故加real；userArrate统一改为行向量。不再涉及编码问题，解码时5解出来是0，故舍弃；
 for i=1:size(antEle,2)
                 if(antEle(2,i)>0)
                         userArrate(i)=leap-real(antEle(2,i));
                 elseif(antEle(2,i)==0&& userArrate(i)~=0)
                          userArrate(i)= leap;
                 end
 end
 
 %信息采集模块，跟在userArrate后面：
        num=delt*userArrate;
        sum_num=sum_num+sum(num);
       for i=1:length(time)
                if(userArrate(i)>=0.001)
                        time(i)=num(i)*makespan(floor(1000*userArrate(i)));
                else
                        time(i)=0;
                end
        end
        sum_time=sum_time+sum(time);
        mean_time=sum_time/sum_num;
 b2=sum(userArrate);
 end
  bblock(b)=sum(block);%alock探测某个区域block随着a的变化
end
 hold on;
%plot(block,'r');

 plot(block/sum_iter_num,'b');
% xlabel('x 区域编号');
 %ylabel('y 堵塞率');
%plot(block/sum(block),'r');
%plot(alock);
%plot(bblock,'r');
%plot(ablock,'r');
 %legend('block','block/sum(block)');
 grid on;
